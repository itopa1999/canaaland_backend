change the attendance date to this year
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






/// <summary>
        ///     This method allows for manually filling a sub-account with all the KYC information
        ///     (every field needed to keep the account running) of its Sponsor
        /// </summary>
        /// <param name="outletUsernames"></param>
        /// <returns></returns>
        [HttpPatch(nameof(CompleteSubAgentProfile))]
        [ProducesResponseType(typeof(GenericAPIResponse), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ErrorResponse), (int)HttpStatusCode.BadRequest)]
        public async Task<IActionResult> CompleteSubAgentProfile(string mainAccountName, List<string> outletUsernames)
        {
            if (outletUsernames.Count < 1)
            {
                return StatusCode(StatusCodes.Status400BadRequest, new ErrorResponse() { ErrorDescription = "Please provide at least one outlet name" });
            }
            var results = await agentLogic.CompleteSubAgentProfileV2(mainAccountName, outletUsernames);
            if (results.ResponseCode == AppConstant.ResponseCode_Success)
            {
                return StatusCode(StatusCodes.Status200OK, results);
            }

            return StatusCode(StatusCodes.Status400BadRequest, new ErrorResponse() { ErrorDescription = results.ResponseDescription });
        }




/// <summary>
        ///     This method allows for manually filling a sub-account with all the KYC information
        ///     (every field needed to keep the account running) of its Sponsor
        /// </summary>
        /// <param name="outletUsernames"></param>
        /// <returns></returns>
        public async Task<GenericAPIResponse> CompleteSubAgentProfileV2(string mainAccountName, List<string> outletUsernames)
        {
            bool updateFullName = true;
            var returnResponse = new GenericAPIResponse();
            var allOutletsExist = await AllOutletsExistAsync(outletUsernames);
            if (!allOutletsExist.isSuccess)
            {
                returnResponse.ResponseCode = AppConstant.ResponseCode_Failure;
                returnResponse.ResponseDescription = $"{allOutletsExist.message}";
                returnResponse.HttpStatusCode = HttpStatusCode.BadRequest;

                return returnResponse;
            }

            var allAreOutlets = await AllAccountsAreOutlets(outletUsernames);
            if (!allAreOutlets.isSuccess)
            {
                returnResponse.ResponseCode = AppConstant.ResponseCode_Failure;
                returnResponse.ResponseDescription = $"{allAreOutlets.message}";
                returnResponse.HttpStatusCode = HttpStatusCode.BadRequest;

                return returnResponse;
            }

            foreach (var outlet in outletUsernames)
            {
                var subAccount = await GetAgentByUsername(outlet).ConfigureAwait(false);
                if (subAccount is not null)
                {
                    var sponsor = await GetAgentByUsername(mainAccountName).ConfigureAwait(false);
                    if (sponsor is null)
                    {
                        returnResponse.ResponseCode = AppConstant.ResponseCode_Failure;
                        returnResponse.ResponseDescription = $"SPONSOR NOT FOUND";
                        returnResponse.HttpStatusCode = HttpStatusCode.BadRequest;

                        return returnResponse;
                    }

                    if (subAccount.AgentType == AgentType.SubAgent || subAccount.AgentType == AgentType.AggregatorOutLet ||
                        subAccount.AgentType == AgentType.APISubAgent || subAccount.AgentType == AgentType.PartnerOutLet ||
                        subAccount.AgentType == AgentType.TeleSalesOutlet)
                    {
                        subAccount.FirstName = updateFullName ? sponsor.FirstName : subAccount.FirstName;
                        subAccount.FullName = updateFullName ? sponsor.FullName : subAccount.FullName;
                        subAccount.Email ??= sponsor.Email;
                        subAccount.AppId = sponsor.AppId;
                        subAccount.Address = sponsor.Address;
                        subAccount.DateOfBirth = sponsor.DateOfBirth;
                        subAccount.EvidenceOfAddress = sponsor.EvidenceOfAddress;
                        subAccount.Gender ??= sponsor.Gender;
                        subAccount.IdCard = sponsor.IdCard;
                        subAccount.Passport = sponsor.Passport;
                        subAccount.Lga = sponsor.Lga;
                        subAccount.State = sponsor.State;
                        subAccount.Region = sponsor.Region;
                        subAccount.NextOfKin = sponsor.NextOfKin;
                        subAccount.NextOfKinPhone = sponsor.NextOfKinPhone;
                        subAccount.RcNumber = sponsor.RcNumber;
                        subAccount.DeviceImei ??= sponsor.DeviceImei;
                        subAccount.AgentStatus = sponsor.AgentStatus;
                        subAccount.Bvn = sponsor.Bvn;
                        subAccount.BvnFullName = sponsor.BvnFullName;
                        subAccount.IsBvnVerified = sponsor.IsBvnVerified;
                        subAccount.IsBvnRecordMatch = sponsor.IsBvnRecordMatch;
                        subAccount.TransactionLimit = sponsor.TransactionLimit;
                        subAccount.IsKycUploaded = sponsor.IsKycUploaded;
                        subAccount.IsKycVerified = sponsor.IsKycVerified;
                        subAccount.PassportVerify = sponsor.PassportVerify;
                        subAccount.IdVerify = sponsor.IdVerify;
                        subAccount.AddressVerify = sponsor.AddressVerify;
                        subAccount.CACDocument = sponsor.CACDocument;
                        subAccount.KycLevel = sponsor.KycLevel;
                        subAccount.IsBusinessVerified = sponsor.IsBusinessVerified;
                        subAccount.SponsorId = sponsor.AgentId;
                        subAccount.SponsorUsername = sponsor.Username;
                        subAccount.SponsorName = sponsor.FullName;

                        string approver = httpContextAccessor?.HttpContext?.User?.Identity?.Name;
                        var (isSponsorAccountSet, agent) = await SetAgentSponsorAccountDetail(subAccount, sponsor, approver);
                        if (isSponsorAccountSet)
                        {
                            subAccount = agent;
                        }

                        await _unitOfWork.Agent.UpdateAgentAsync(subAccount).ConfigureAwait(false);

                        await _agentDocsRepo.UseSuperAgentKycDocuments(subAccount.AgentId, sponsor.AgentId, approver);

                        Log.Information($"Main Account: {sponsor.Username} KYC details was replicated for Sub-account: {subAccount.Username}, SOURCE: {CompleteProfileSource.Manual.ToString()} ");
                    }
                }
            }

            returnResponse.ResponseCode = AppConstant.ResponseCode_Success;
            returnResponse.ResponseDescription = $"{AppConstant.ResponseDescription_Success}: {outletUsernames.Count} sub-account(s) updated using their main accout KYC details";
            returnResponse.HttpStatusCode = HttpStatusCode.OK;
            return returnResponse;
        }